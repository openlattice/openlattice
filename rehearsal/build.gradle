/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 */

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'com.github.spotbugs' version '4.6.0'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
}

description = "Integration Tests"
group = "com.openlattice"

apply from: "../gradles/openlattice.gradle"

checkstyle {
    toolVersion = "7.4"
    showViolations = false
    config project.resources.text.fromUri(rootProject.file('gradles/checkstyle.xml').toURI())
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}


jacoco {
    toolVersion = "0.8.2"
}


dependencies {
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    testImplementation "com.openlattice:conductor:${conductor_version}"
    testImplementation "com.openlattice:api:${api_version}"
    testImplementation "com.openlattice:conductor-client:${conductor_client_version}"
    testImplementation "com.openlattice:datastore:${datastore_version}"
    testImplementation "com.openlattice:shuttle:${shuttle_version}"
    testImplementation "com.openlattice:launchpad:${launchpad_version}"
    testImplementation "com.openlattice:rhizome:${rhizome_version}"
    testImplementation "com.openlattice:launchpad:${launchpad_version}"

    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.quiet(project.name + " using project dependencies.")
        testImplementation( project(path: ":api", configuration: "tests"))
        testImplementation( project(path: ":rhizome", configuration: "tests"))
        testImplementation( project(path: ":rhizome-client", configuration: "tests"))
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        testImplementation("com.openlattice:api:${api_version}:tests")
        testImplementation "com.openlattice:rhizome:${rhizome_version}:tests"
        testImplementation "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    testImplementation "junit:junit:${junit_version}"
    testImplementation( "org.mockito:mockito-all:${mockito_version}" ) {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility=JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
    options.compilerArgs+= [ "--add-modules", "java.base",
                             "--add-modules", "java.se",
                             "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED"]
}

tasks.withType(Test) {
    jvmArgs += [ "--add-modules", "java.base",
                 "--add-modules", "java.se",
                 "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                 "--add-opens","java.base/java.lang=ALL-UNNAMED",
                 "--add-opens","java.base/java.nio=ALL-UNNAMED",
                 "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                 "--add-opens","java.management/sun.management=ALL-UNNAMED",
                 "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}
