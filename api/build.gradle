
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:5.1.1"
    }

    configurations.classpath {
        exclude module: 'slf4j-simple'
    }
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'com.github.spotbugs'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
    id 'org.jetbrains.dokka'
    id 'org.hidetake.swagger.generator'
    id 'com.github.jk1.dependency-license-report'
}

description = "OpenLattice REST APIs"
group = "com.openlattice"
ext.projectName = 'api'
ext.scmUrl = 'scm:git:https://github.com/openlattice/api.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/api.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/api.git'

apply from: "../gradles/openlattice.gradle"
apply plugin: 'org.openapi.generator'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}


import com.github.jk1.license.render.InventoryHtmlReportRenderer

licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
}

jacoco {
    toolVersion = "0.8.2"
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    toolVersion = '7.4'
    showViolations = false
    config project.resources.text.fromUri(rootProject.file('gradles/checkstyle.xml').toURI())
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Javadoc) {
    enabled = false
}

//TODO: Once Swagger 3.0 has working OpenAPI support finish wiring all this in.

def swaggerInput = "openlattice.yaml"
def swaggerOutputDir = file('build/swagger')

swaggerSources {
    openlattice {
        inputFile = file(swaggerInput)
        code {
            language = 'java'
            configFile = file('oas-java.json')
            outputDir = swaggerOutputDir
            //Disabled due to https://github.com/int128/gradle-swagger-generator-plugin/issues/86
            //dependsOn validation
        }
    }
}

task generateConfluenceDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "cwiki"
    inputSpec = file("openlattice.yaml").getAbsolutePath()
    outputDir = file("build/openapi/cwiki").getAbsolutePath()
    validateSpec = false
}

task generatePythonClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "python"
    inputSpec = file("openlattice.yaml").getAbsolutePath()
    outputDir = file("build/openapi/python").getAbsolutePath()
    configFile = file("oas-config.json").getAbsolutePath()
    validateSpec = false
}

task generateRClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "r"
    inputSpec = file("openlattice.yaml").getAbsolutePath()
    outputDir = file("build/openapi/r").getAbsolutePath()
    configFile = file("oas-config.json").getAbsolutePath()
    validateSpec = false
}

task generateKotlinClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    inputSpec = file("openlattice.yaml").getAbsolutePath()
    outputDir = file("build/openapi/kotlin").getAbsolutePath()
    apiPackage = "com.openlattice.client.api"
    invokerPackage = "com.openlattice.client"
    modelPackage = "com.openlattice.client.model"
    configOptions = [
            dateLibrary: "java8"
    ]
    validateSpec = false
}

clean.doFirst {
    delete(swaggerOutputDir)
    delete(file("build/openapi"))
}

test {
    ignoreFailures = true
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.26'
    swaggerUI 'org.webjars:swagger-ui:3.22.2'

    /*
     * SL4J
     */
    implementation group: "org.slf4j", name: "slf4j-api", version: "${slf4j_version}"

    /*
     * @Inject and @Nullable support
     */
    implementation "javax.inject:javax.inject:${javax_inject_version}"

    implementation group: "com.twilio.sdk", name: "twilio", version: "$twilio_version"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    implementation "com.esotericsoftware:kryo-shaded:${kryo_shaded_version}"
    implementation "com.esotericsoftware:minlog:${minlog_version}"
    implementation "com.esotericsoftware:reflectasm:${reflectasm_version}"
    implementation "org.objenesis:objenesis:${objenesis_version}"
    implementation "de.javakaffee:kryo-serializers:$kryo_serializers_version"

    implementation "org.apache.commons:commons-lang3:${commonsLang_version}"
    implementation "commons-io:commons-io:${commonsio_version}"
    implementation "commons-validator:commons-validator:${commonsvalidator_version}"
    implementation "org.apache.commons:commons-text:${commonsText_version}"

    api "com.google.maps:google-maps-services:${google_maps_services}"
    api "com.google.guava:guava:${guava_version}"
    implementation "org.apache.olingo:odata-commons-api:${odata_version}"
    implementation "org.apache.olingo:odata-commons-core:${odata_version}"
    implementation "org.apache.olingo:odata-server-api:${odata_version}"
    implementation "org.apache.olingo:odata-server-core:${odata_version}"

    implementation "org.xerial.snappy:snappy-java:${snappy_version}"
    implementation "net.jpountz.lz4:lz4:${lz4_version}"
    implementation "com.squareup.retrofit2:retrofit:${retrofit2_version}"
    implementation "com.auth0:auth0:${project.auth0_version}"
    /*
     * JACKSON SERIALIZATION
     * YAML via SnakeYaml
     * Afterburner for faster serialization
     * Guava integration
     * Smile for binary serialization
     * Jersey integration
     * Jaxb annotation support
     */
    implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"
    implementation "org.yaml:snakeyaml:${snakeyaml_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.auth0:auth0:${project.auth0_version}"

    api "com.openlattice:rhizome-client:${rhizome_client_version}"
    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        testImplementation(project(path: ":rhizome-client", configuration: "tests"))
    } else {
        testImplementation "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    /*
     * TESTING
     */
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j_version}"
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j_version}"
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j_version}"

    testImplementation "junit:junit:${junit_version}"
    testImplementation("org.mockito:mockito-all:${mockito_version}") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility = JavaVersion.VERSION_11
}
