/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 */

plugins {
    id 'application'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'com.github.spotbugs' version '3.0.0'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.5.20-RC'
}

description = "Datastore"
group = "com.openlattice"
ext.projectName = "datastore"
ext.scmUrl = 'scm:git:https://github.com/openlattice/datastore.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/datastore.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/datastore.git'

distTar {
    archiveName "datastore.tgz"
}

apply from: "../gradles/openlattice.gradle"

mainClassName = "com.openlattice.datastore.Datastore"

def DS_XMS = "$System.env.DATASTORE_XMS"
def DS_XMX = "$System.env.DATASTORE_XMX"
def DS_ARGS = "$System.env.DATASTORE_ARGS"
def PARALLEL = "$System.env.PARALLELISM"
def GC = "$System.env.GC"

if (DS_XMS == 'null' || DS_XMS == null || DS_XMS == "") {
    DS_XMS = '-Xms1g'
}

if (DS_XMX == 'null' || DS_XMX == null || DS_XMX == "") {
    DS_XMX = '-Xmx4g'
}

if (DS_ARGS == 'null' || DS_ARGS == null || DS_ARGS == "") {
    DS_ARGS = 'local postgres medialocal auditlocal'
}


if (PARALLEL == 'null' || PARALLEL == null || PARALLEL == "") {
    PARALLEL = "-Djava.util.concurrent.ForkJoinPool.common.parallelism=" + Runtime.runtime.availableProcessors()
}

if (GC == 'null' || GC == null || GC == "") {
    GC = "-XX:+UseG1GC"
}

println "Using java args for running ${projectName}: Xms=" + DS_XMS + ",Xmx=" + DS_XMX + " -server"

applicationDefaultJvmArgs = [DS_XMS, DS_XMX, "-server", GC, PARALLEL]
applicationDefaultJvmArgs += [ "--add-modules", "java.se",
                               "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                               "--add-opens","java.base/java.lang=ALL-UNNAMED",
                               "--add-opens","java.base/java.nio=ALL-UNNAMED",
                               "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                               "--add-opens","java.management/sun.management=ALL-UNNAMED",
                               "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

checkstyle {
    toolVersion = '7.4'
    showViolations = false
    config project.resources.text.fromUri(rootProject.file('gradles/checkstyle.xml').toURI())
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

run {
    if (DS_ARGS != null) {
        args DS_ARGS.split();
    } else if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

configurations {
    tests
    published.extendsFrom tests, archives

    implementation {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
}

test {
  ignoreFailures = true
}

ext.odata_version = '4.2.0'
dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    implementation "com.openlattice:conductor-client:${conductor_client_version}"
    implementation "com.openlattice:api:${api_version}"
    implementation "com.openlattice:rhizome:${rhizome_version}"

    testImplementation "com.openlattice:conductor:${conductor_version}"

    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        testImplementation(project(path: ":api", configuration: "tests"))
        testImplementation(project(path: ":rhizome", configuration: "tests"))
        testImplementation(project(path: ":rhizome-client", configuration: "tests"))
    } else {
        testImplementation "com.openlattice:api:${api_version}:tests"
        testImplementation "com.openlattice:rhizome:${rhizome_version}:tests"
        testImplementation "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    implementation group: "com.twilio.sdk", name: "twilio", version: "${twilio_version}"

    implementation "javax.annotation:javax.annotation-api:$javax_annotation_api_version"
    implementation "org.apache.olingo:odata-server-api:${odata_version}"
    implementation "org.apache.olingo:odata-server-core:${odata_version}"
    implementation "org.apache.olingo:odata-commons-api:${odata_version}"
    implementation "org.apache.olingo:odata-commons-core:${odata_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    /*
     * TESTING
     */
    testImplementation "junit:junit:${junit_version}"

    testImplementation("org.mockito:mockito-all:${mockito_version}") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_11
    ext.targetCompatibility = JavaVersion.VERSION_11
}


tasks.withType(JavaCompile) {
    options.compilerArgs+= [ "--add-modules", "java.se",
                             "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED"]
}

tasks.withType(Test) {
    jvmArgs += [ "--add-modules", "java.se",
                 "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                 "--add-opens","java.base/java.lang=ALL-UNNAMED",
                 "--add-opens","java.base/java.nio=ALL-UNNAMED",
                 "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                 "--add-opens","java.management/sun.management=ALL-UNNAMED",
                 "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}


jar {
    doFirst {
        manifest {
            attributes (
                    "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(" "),
                    "Main-Class": mainClassName
            )
        }
    }
}

startScripts {
    classpath = files(jar.archiveFile.get().asFile)
}
