/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 */

plugins {
    id "java"
    id 'maven-publish'
    id 'signing'
    id "eclipse"
    id "idea"
    id "jacoco"
    id 'checkstyle'
    id 'com.github.spotbugs'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
}

description = "Responsible for sending outgoing e-mails from a queue."
group = "com.openlattice"

ext.projectName = "courier"
ext.scmUrl = 'scm:git:https://github.com/openlattice/courier.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/courier.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/courier.git'

apply from: "../gradles/openlattice.gradle"
sourceCompatibility=JavaVersion.VERSION_11
targetCompatibility=JavaVersion.VERSION_11

jacoco {
    toolVersion = "0.8.2"
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    toolVersion = '7.4'
    showViolations = false
    config project.resources.text.fromUri(rootProject.file('gradles/checkstyle.xml').toURI())
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    ignoreFailures = true
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    implementation "com.esotericsoftware:kryo-shaded:${kryo_shaded_version}"
    implementation "com.esotericsoftware:minlog:${minlog_version}"
    implementation "com.esotericsoftware:reflectasm:${reflectasm_version}"
    implementation "org.objenesis:objenesis:${objenesis_version}"

    implementation "javax.mail:javax.mail-api:${javax_mail_api}"
    implementation "com.sun.mail:javax.mail:${sun_javax_mail_version}"
    implementation "com.sun.mail:all:${sun_mail_all_version}"

    implementation "com.openlattice:scribe:${scribe_version}"
    implementation "com.openlattice:rhizome:${rhizome_version}"

    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        testImplementation(project(path: ":rhizome-client", configuration: "tests"))
        testImplementation(project(path: ":rhizome", configuration: "tests"))
    } else {
        testImplementation "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
        testImplementation "com.openlattice:rhizome:${rhizome_version}:tests"
    }
    /*
     * TESTING
     */
    testImplementation "junit:junit:${junit_version}"
    testImplementation( "org.mockito:mockito-all:${mockito_version}" ) {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }

    /*
     * GreenMail
     * http://www.icegreen.com/greenmail/
     * https://github.com/greenmail-mail-test/greenmail
     *
     * A library that provides a simple POP3/IMAP/SMTP mail server, and makes writing unit/integration tests easy for
     * testing sending/receiving emails against a running mail server.
     */
    testImplementation "com.icegreen:greenmail:${greenmail_version}"

    testImplementation( "org.mockito:mockito-all:${mockito_version}" ) {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }

    /*
     * JMustache
     * http://mustache.github.io/
     * https://github.com/samskivert/jmustache
     *
     * Java implementation of Mustache, a logic-less template system.
     */
    implementation "com.samskivert:jmustache:${jmustache_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility=JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
