/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // Replace $version with the current version
        classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
    }
}


plugins {
    id 'application'
    id 'checkstyle'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'com.github.spotbugs'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
}

description = "Linking Server"
group = "com.openlattice"

distTar {
    archiveName "linker.tgz"
}

ext.projectName = "linker"
ext.scmUrl = 'scm:git:https://github.com/openlattice/linker.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/linker.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/linker.git'

apply from: "../gradles/openlattice.gradle"
apply plugin: 'license-report'

def LINKER_XMS = "$System.env.LINKER_XMS"
def LINKER_XMX = "$System.env.LINKER_XMX"
def L_ARGS = "$System.env.LINKER_ARGS"
def PARALLEL = "$System.env.PARALLELISM"
def GC = "$System.env.GC"

if (LINKER_XMS == 'null' || LINKER_XMS == null || LINKER_XMS == "") {
    LINKER_XMS = '-Xms1g'
}

if (LINKER_XMX == 'null' || LINKER_XMX == null || LINKER_XMX == "") {
    LINKER_XMX = '-Xms4g'
}

if (L_ARGS == 'null' || L_ARGS == null || L_ARGS == "") {
    L_ARGS = 'local postgres keras medialocal auditlocal'
}

if (PARALLEL == 'null' || PARALLEL == null || PARALLEL == "") {
    PARALLEL = "-Djava.util.concurrent.ForkJoinPool.common.parallelism=" + Runtime.runtime.availableProcessors()
}

if (GC == 'null' || GC == null || GC == "") {
    GC = "-XX:+UseG1GC"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

mainClassName = "com.openlattice.linking.Linker"
applicationDefaultJvmArgs = [LINKER_XMS, LINKER_XMX, "-server", GC, PARALLEL]
applicationDefaultJvmArgs += ["--add-modules", "java.se",
                              "--add-exports", "java.base/jdk.internal.ref=ALL-UNNAMED",
                              "--add-opens", "java.base/java.lang=ALL-UNNAMED",
                              "--add-opens", "java.base/java.nio=ALL-UNNAMED",
                              "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",
                              "--add-opens", "java.management/sun.management=ALL-UNNAMED",
                              "--add-opens", "jdk.management/com.sun.management.internal=ALL-UNNAMED"]

println "Using java args for running ${projectName}: " + Arrays.toString(applicationDefaultJvmArgs)

run {
    if (L_ARGS != null) {
        args L_ARGS.split()
    } else if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

checkstyle {
  toolVersion = "${checkstyle_version}"
  showViolations = false
    config project.resources.text.fromUri(rootProject.file('gradles/checkstyle.xml').toURI())
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.8.2"
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}
spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

configurations {
    provided
}

configurations.all {
    exclude module: 'slf4j-log4j12'
    exclude group: 'asm', module: 'asm'
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

test {
    ignoreFailures = true
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    /*
     * DEEPLEARNING4J
    */
    implementation("org.deeplearning4j:deeplearning4j-core:${deeplearning4j}") {
        exclude module: 'guava'
    }

    implementation("org.nd4j:nd4j-native-platform:${deeplearning4j}") {
        exclude module: 'guava'
    }

    implementation "org.ow2.asm:asm:${asm_version}"
    implementation "org.nd4j:nd4j-cuda-9.2-platform:${deeplearning4j}"

    implementation "com.openlattice:conductor-client:${conductor_client_version}"
    implementation "com.openlattice:courier:${courier_version}"
    implementation "com.openlattice:rhizome:${rhizome_version}"

    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        testImplementation(project(path: ":rhizome-client", configuration: "tests"))
    } else {
        testImplementation "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }
    /*
     * TESTING
     */
    testImplementation "junit:junit:${junit_version}"
    testImplementation "org.mockito:mockito-all:${mockito_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_11
    ext.targetCompatibility = JavaVersion.VERSION_11
}

eclipse.classpath.plusConfigurations += [configurations.provided]

tasks.withType(JavaCompile) {
    options.compilerArgs+= [ "--add-modules", "java.se"]
}

tasks.withType(Test) {
    jvmArgs += ["--add-modules", "java.se",
                "--add-exports", "java.base/jdk.internal.ref=ALL-UNNAMED",
                "--add-opens", "java.base/java.lang=ALL-UNNAMED",
                "--add-opens", "java.base/java.nio=ALL-UNNAMED",
                "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",
                "--add-opens", "java.management/sun.management=ALL-UNNAMED",
                "--add-opens", "jdk.management/com.sun.management.internal=ALL-UNNAMED"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}

jar {
    doFirst {
        manifest {
            attributes (
                    "Class-Path": configurations.runtimeClasspath.files.collect { it.getName() }.join(" "),
                    "Main-Class": mainClassName
            )
        }
    }
}

startScripts {
    classpath = files(jar.archiveFile.get().asFile)
}
