/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 *
 */

plugins {
    id 'eclipse'
    id 'idea'
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id "maven-publish"
    id "signing"
    id 'com.github.spotbugs'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.spring'
    id 'org.jetbrains.dokka'
    id 'com.github.jk1.dependency-license-report'
    id 'org.owasp.dependencycheck'
}

description = "Conductor Client"
group = "com.openlattice"

ext.projectName = "conductor-client"
ext.scmUrl = 'scm:git:https://github.com/openlattice/conductor-client.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/conductor-client.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/conductor-client.git'

apply from: "../gradles/openlattice.gradle"
apply plugin: "kotlin"

sourceCompatibility=JavaVersion.VERSION_11
targetCompatibility=JavaVersion.VERSION_11


import com.github.jk1.license.render.InventoryHtmlReportRenderer

licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
}

checkstyle {
  toolVersion = "7.4"
  showViolations = false
    config project.resources.text.fromUri(rootProject.file('gradles/checkstyle.xml').toURI())
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
    maxHeapSize = '2g'
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Javadoc) {
    enabled = false
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

jacoco {
    toolVersion = "0.8.2"
}


tasks.withType(JavaCompile) {
    options.compilerArgs+= ["--add-modules", "java.base",
                            "--add-modules", "java.se",
                            "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED"]
}

tasks.withType(Test) {
    jvmArgs += ["--add-modules", "java.base",
                "--add-modules", "java.se",
                "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                "--add-opens","java.base/java.lang=ALL-UNNAMED",
                "--add-opens","java.base/java.nio=ALL-UNNAMED",
                "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                "--add-opens","java.management/sun.management=ALL-UNNAMED",
                "--add-opens", "jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED",
                "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"

    annotationProcessor "net.jcip:jcip-annotations:${jcip_version}"
    annotationProcessor "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testAnnotationProcessor "net.jcip:jcip-annotations:${jcip_version}"
    testAnnotationProcessor "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    compileOnly "com.google.code.findbugs:findbugs:${findbugs_version}"
    /*
     * SL4J
     */
    implementation group: "org.slf4j", name: "slf4j-api", version:"${slf4j_version}"

    /*
     * @Inject and @Nullable support
     */
    implementation "javax.inject:javax.inject:${javax_inject_version}"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}"
    implementation "com.esotericsoftware:kryo-shaded:${kryo_shaded_version}"
    implementation "com.esotericsoftware:minlog:${minlog_version}"
    implementation "com.esotericsoftware:reflectasm:${reflectasm_version}"
    implementation "org.objenesis:objenesis:${objenesis_version}"
    implementation "net.snowflake:snowflake-jdbc:${snowflake_version}"

    api "com.google.guava:guava:${guava_version}"
    implementation "org.apache.olingo:odata-commons-api:${odata_version}"
    implementation "org.apache.olingo:odata-commons-core:${odata_version}"
    implementation "org.apache.olingo:odata-server-api:${odata_version}"
    implementation "org.apache.olingo:odata-server-core:${odata_version}"
    //implementation "org.apache.tika:tika-core:1.19.1"

    implementation "org.xerial.snappy:snappy-java:${snappy_version}"
    implementation "net.jpountz.lz4:lz4:${lz4_version}"
    implementation "de.javakaffee:kryo-serializers:${kryo_serializers_version}"
    api "org.apache.commons:commons-text:${commonsText_version}"

    api "com.openlattice:api:${api_version}"
    api "com.openlattice:scribe:${scribe_version}"
    api "com.openlattice:rhizome:${rhizome_version}"

    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        testImplementation(project(path: ":api", configuration: "tests"))
        testImplementation(project(path: ":scribe", configuration: "tests"))
        testImplementation(project(path: ":rhizome", configuration: "tests"))
        testImplementation(project(path: ":rhizome-client", configuration: "tests"))
    } else {
        testImplementation "com.openlattice:api:${api_version}:tests"
        testImplementation "com.openlattice:scribe:${scribe_version}:tests"
        testImplementation "com.openlattice:rhizome:${rhizome_version}:tests"
        testImplementation "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    /*
     * ELASTICSEARCH
     */
    api("org.elasticsearch:elasticsearch:${elastic_version}") {
        exclude module: 'slf4j-log4j12'
    }

    api("org.elasticsearch.client:transport:${elastic_version}") {
        exclude module: 'slf4j-log4j12'
    }

    api("org.elasticsearch.client:elasticsearch-rest-high-level-client:${elastic_version}") {
        exclude module: 'slf4j-log4j12'
    }

    /*
     * TESTING
     */
    testImplementation "junit:junit:${junit_version}"
    testImplementation( "org.mockito:mockito-all:${mockito_version}" ) {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }
}

test {
    ignoreFailures = true
    maxHeapSize = "8g"
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility=JavaVersion.VERSION_11
}
